// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	constant "github.com/ffauzann/loan-service/internal/constant"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ffauzann/loan-service/internal/model"

	sql "database/sql"

	sqlx "github.com/jmoiron/sqlx"
)

// DBRepository is an autogenerated mock type for the DBRepository type
type DBRepository struct {
	mock.Mock
}

// ApproveLoan provides a mock function with given fields: ctx, approval, tx
func (_m *DBRepository) ApproveLoan(ctx context.Context, approval *model.LoanApproval, tx *sqlx.Tx) error {
	ret := _m.Called(ctx, approval, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoanApproval, *sqlx.Tx) error); ok {
		r0 = rf(ctx, approval, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeginTx provides a mock function with given fields: ctx, opts
func (_m *DBRepository) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sqlx.Tx, error) {
	ret := _m.Called(ctx, opts)

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (*sqlx.Tx, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sqlx.Tx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseAccount provides a mock function with given fields: ctx, req, tx
func (_m *DBRepository) CloseAccount(ctx context.Context, req *model.CloseAccountRequest, tx *sqlx.Tx) error {
	ret := _m.Called(ctx, req, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CloseAccountRequest, *sqlx.Tx) error); ok {
		r0 = rf(ctx, req, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLoan provides a mock function with given fields: ctx, loan, tx
func (_m *DBRepository) CreateLoan(ctx context.Context, loan *model.Loan, tx *sqlx.Tx) error {
	ret := _m.Called(ctx, loan, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Loan, *sqlx.Tx) error); ok {
		r0 = rf(ctx, loan, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLoanDisbursement provides a mock function with given fields: ctx, disbursement, tx
func (_m *DBRepository) CreateLoanDisbursement(ctx context.Context, disbursement *model.LoanDisbursement, tx *sqlx.Tx) error {
	ret := _m.Called(ctx, disbursement, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoanDisbursement, *sqlx.Tx) error); ok {
		r0 = rf(ctx, disbursement, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLoanInvestment provides a mock function with given fields: ctx, investment, tx
func (_m *DBRepository) CreateLoanInvestment(ctx context.Context, investment *model.LoanInvestment, tx *sqlx.Tx) error {
	ret := _m.Called(ctx, investment, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoanInvestment, *sqlx.Tx) error); ok {
		r0 = rf(ctx, investment, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, user, tx
func (_m *DBRepository) CreateUser(ctx context.Context, user *model.User, tx *sqlx.Tx) error {
	ret := _m.Called(ctx, user, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, *sqlx.Tx) error); ok {
		r0 = rf(ctx, user, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndTx provides a mock function with given fields: ctx, tx, err
func (_m *DBRepository) EndTx(ctx context.Context, tx *sqlx.Tx, err error) {
	_m.Called(ctx, tx, err)
}

// GetInvestmentsByLoanId provides a mock function with given fields: ctx, loanId, tx
func (_m *DBRepository) GetInvestmentsByLoanId(ctx context.Context, loanId uint64, tx *sqlx.Tx) ([]*model.LoanInvestment, error) {
	ret := _m.Called(ctx, loanId, tx)

	var r0 []*model.LoanInvestment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *sqlx.Tx) ([]*model.LoanInvestment, error)); ok {
		return rf(ctx, loanId, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *sqlx.Tx) []*model.LoanInvestment); ok {
		r0 = rf(ctx, loanId, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.LoanInvestment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, *sqlx.Tx) error); ok {
		r1 = rf(ctx, loanId, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanById provides a mock function with given fields: ctx, loanID, tx
func (_m *DBRepository) GetLoanById(ctx context.Context, loanID uint64, tx *sqlx.Tx) (*model.Loan, error) {
	ret := _m.Called(ctx, loanID, tx)

	var r0 *model.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *sqlx.Tx) (*model.Loan, error)); ok {
		return rf(ctx, loanID, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *sqlx.Tx) *model.Loan); ok {
		r0 = rf(ctx, loanID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, *sqlx.Tx) error); ok {
		r1 = rf(ctx, loanID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByIds provides a mock function with given fields: ctx, userIds, tx
func (_m *DBRepository) GetUserByIds(ctx context.Context, userIds []uint64, tx *sqlx.Tx) ([]*model.User, error) {
	ret := _m.Called(ctx, userIds, tx)

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint64, *sqlx.Tx) ([]*model.User, error)); ok {
		return rf(ctx, userIds, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint64, *sqlx.Tx) []*model.User); ok {
		r0 = rf(ctx, userIds, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint64, *sqlx.Tx) error); ok {
		r1 = rf(ctx, userIds, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByOneOfIdentifier provides a mock function with given fields: ctx, val
func (_m *DBRepository) GetUserByOneOfIdentifier(ctx context.Context, val string) (*model.User, error) {
	ret := _m.Called(ctx, val)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, val)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, val)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, val)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserExist provides a mock function with given fields: ctx, userIdType, userIdVal
func (_m *DBRepository) IsUserExist(ctx context.Context, userIdType constant.UserIdType, userIdVal string) (bool, error) {
	ret := _m.Called(ctx, userIdType, userIdVal)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, constant.UserIdType, string) (bool, error)); ok {
		return rf(ctx, userIdType, userIdVal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, constant.UserIdType, string) bool); ok {
		r0 = rf(ctx, userIdType, userIdVal)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, constant.UserIdType, string) error); ok {
		r1 = rf(ctx, userIdType, userIdVal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoan provides a mock function with given fields: ctx, loan, tx
func (_m *DBRepository) UpdateLoan(ctx context.Context, loan *model.Loan, tx *sqlx.Tx) error {
	ret := _m.Called(ctx, loan, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Loan, *sqlx.Tx) error); ok {
		r0 = rf(ctx, loan, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDBRepository creates a new instance of DBRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBRepository {
	mock := &DBRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
