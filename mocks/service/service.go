// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/ffauzann/loan-service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// ApproveLoan provides a mock function with given fields: ctx, req
func (_m *Service) ApproveLoan(ctx context.Context, req *model.ApproveLoanRequest) (*model.ApproveLoanResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.ApproveLoanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ApproveLoanRequest) (*model.ApproveLoanResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.ApproveLoanRequest) *model.ApproveLoanResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApproveLoanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.ApproveLoanRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseAccount provides a mock function with given fields: ctx, req
func (_m *Service) CloseAccount(ctx context.Context, req *model.CloseAccountRequest) (*model.CloseAccountResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.CloseAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CloseAccountRequest) (*model.CloseAccountResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CloseAccountRequest) *model.CloseAccountResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CloseAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CloseAccountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoan provides a mock function with given fields: ctx, req
func (_m *Service) CreateLoan(ctx context.Context, req *model.CreateLoanRequest) (*model.CreateLoanResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.CreateLoanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateLoanRequest) (*model.CreateLoanResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateLoanRequest) *model.CreateLoanResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CreateLoanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateLoanRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisburseLoan provides a mock function with given fields: ctx, req
func (_m *Service) DisburseLoan(ctx context.Context, req *model.DisburseLoanRequest) (*model.DisburseLoanResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.DisburseLoanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DisburseLoanRequest) (*model.DisburseLoanResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.DisburseLoanRequest) *model.DisburseLoanResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DisburseLoanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.DisburseLoanRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvestInLoan provides a mock function with given fields: ctx, req
func (_m *Service) InvestInLoan(ctx context.Context, req *model.InvestInLoanRequest) (*model.InvestInLoanResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.InvestInLoanResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.InvestInLoanRequest) (*model.InvestInLoanResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.InvestInLoanRequest) *model.InvestInLoanResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.InvestInLoanResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.InvestInLoanRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserExist provides a mock function with given fields: ctx, req
func (_m *Service) IsUserExist(ctx context.Context, req *model.IsUserExistRequest) (*model.IsUserExistResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.IsUserExistResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.IsUserExistRequest) (*model.IsUserExistResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.IsUserExistRequest) *model.IsUserExistResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.IsUserExistResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.IsUserExistRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Jwks provides a mock function with given fields: ctx
func (_m *Service) Jwks(ctx context.Context) ([]*model.Jwk, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Jwk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Jwk, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Jwk); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Jwk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, req
func (_m *Service) Login(ctx context.Context, req *model.LoginRequest) (*model.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginRequest) (*model.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginRequest) *model.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, req
func (_m *Service) RefreshToken(ctx context.Context, req *model.RefreshTokenRequest) (*model.RefreshTokenResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.RefreshTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RefreshTokenRequest) (*model.RefreshTokenResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.RefreshTokenRequest) *model.RefreshTokenResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RefreshTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.RefreshTokenRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *Service) Register(ctx context.Context, req *model.RegisterRequest) (*model.RegisterResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RegisterRequest) (*model.RegisterResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.RegisterRequest) *model.RegisterResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.RegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMail provides a mock function with given fields: ctx, req
func (_m *Service) SendMail(ctx context.Context, req *model.EmailRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.EmailRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
