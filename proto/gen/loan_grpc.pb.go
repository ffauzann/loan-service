// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: loan.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LoanService_CreateLoan_FullMethodName   = "/grpcPostgresAuthUserAsymmetric.loan.LoanService/CreateLoan"
	LoanService_ApproveLoan_FullMethodName  = "/grpcPostgresAuthUserAsymmetric.loan.LoanService/ApproveLoan"
	LoanService_InvestInLoan_FullMethodName = "/grpcPostgresAuthUserAsymmetric.loan.LoanService/InvestInLoan"
	LoanService_DisburseLoan_FullMethodName = "/grpcPostgresAuthUserAsymmetric.loan.LoanService/DisburseLoan"
)

// LoanServiceClient is the client API for LoanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanServiceClient interface {
	CreateLoan(ctx context.Context, in *CreateLoanRequest, opts ...grpc.CallOption) (*CreateLoanResponse, error)
	ApproveLoan(ctx context.Context, in *ApproveLoanRequest, opts ...grpc.CallOption) (*ApproveLoanResponse, error)
	InvestInLoan(ctx context.Context, in *InvestInLoanRequest, opts ...grpc.CallOption) (*InvestInLoanResponse, error)
	DisburseLoan(ctx context.Context, in *DisburseLoanRequest, opts ...grpc.CallOption) (*DisburseLoanResponse, error)
}

type loanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanServiceClient(cc grpc.ClientConnInterface) LoanServiceClient {
	return &loanServiceClient{cc}
}

func (c *loanServiceClient) CreateLoan(ctx context.Context, in *CreateLoanRequest, opts ...grpc.CallOption) (*CreateLoanResponse, error) {
	out := new(CreateLoanResponse)
	err := c.cc.Invoke(ctx, LoanService_CreateLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) ApproveLoan(ctx context.Context, in *ApproveLoanRequest, opts ...grpc.CallOption) (*ApproveLoanResponse, error) {
	out := new(ApproveLoanResponse)
	err := c.cc.Invoke(ctx, LoanService_ApproveLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) InvestInLoan(ctx context.Context, in *InvestInLoanRequest, opts ...grpc.CallOption) (*InvestInLoanResponse, error) {
	out := new(InvestInLoanResponse)
	err := c.cc.Invoke(ctx, LoanService_InvestInLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) DisburseLoan(ctx context.Context, in *DisburseLoanRequest, opts ...grpc.CallOption) (*DisburseLoanResponse, error) {
	out := new(DisburseLoanResponse)
	err := c.cc.Invoke(ctx, LoanService_DisburseLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanServiceServer is the server API for LoanService service.
// All implementations should embed UnimplementedLoanServiceServer
// for forward compatibility
type LoanServiceServer interface {
	CreateLoan(context.Context, *CreateLoanRequest) (*CreateLoanResponse, error)
	ApproveLoan(context.Context, *ApproveLoanRequest) (*ApproveLoanResponse, error)
	InvestInLoan(context.Context, *InvestInLoanRequest) (*InvestInLoanResponse, error)
	DisburseLoan(context.Context, *DisburseLoanRequest) (*DisburseLoanResponse, error)
}

// UnimplementedLoanServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLoanServiceServer struct {
}

func (UnimplementedLoanServiceServer) CreateLoan(context.Context, *CreateLoanRequest) (*CreateLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoan not implemented")
}
func (UnimplementedLoanServiceServer) ApproveLoan(context.Context, *ApproveLoanRequest) (*ApproveLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLoan not implemented")
}
func (UnimplementedLoanServiceServer) InvestInLoan(context.Context, *InvestInLoanRequest) (*InvestInLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvestInLoan not implemented")
}
func (UnimplementedLoanServiceServer) DisburseLoan(context.Context, *DisburseLoanRequest) (*DisburseLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisburseLoan not implemented")
}

// UnsafeLoanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanServiceServer will
// result in compilation errors.
type UnsafeLoanServiceServer interface {
	mustEmbedUnimplementedLoanServiceServer()
}

func RegisterLoanServiceServer(s grpc.ServiceRegistrar, srv LoanServiceServer) {
	s.RegisterService(&LoanService_ServiceDesc, srv)
}

func _LoanService_CreateLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).CreateLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_CreateLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).CreateLoan(ctx, req.(*CreateLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_ApproveLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).ApproveLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_ApproveLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).ApproveLoan(ctx, req.(*ApproveLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_InvestInLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvestInLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).InvestInLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_InvestInLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).InvestInLoan(ctx, req.(*InvestInLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_DisburseLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisburseLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).DisburseLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_DisburseLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).DisburseLoan(ctx, req.(*DisburseLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanService_ServiceDesc is the grpc.ServiceDesc for LoanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcPostgresAuthUserAsymmetric.loan.LoanService",
	HandlerType: (*LoanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoan",
			Handler:    _LoanService_CreateLoan_Handler,
		},
		{
			MethodName: "ApproveLoan",
			Handler:    _LoanService_ApproveLoan_Handler,
		},
		{
			MethodName: "InvestInLoan",
			Handler:    _LoanService_InvestInLoan_Handler,
		},
		{
			MethodName: "DisburseLoan",
			Handler:    _LoanService_DisburseLoan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan.proto",
}
