-- Role table.
CREATE TABLE IF NOT EXISTS "role" (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50) NOT NULL,
    description VARCHAR(100),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by BIGINT,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_by BIGINT,
    deleted_at TIMESTAMPTZ,
    deleted_by BIGINT
);

-- Role dummy data.
INSERT INTO "role"(id, name, description) VALUES
    (1, 'Super Admin', 'All access are granted'),
    (2, 'Admin', 'WIP: Several access are granted'),
    (3, 'Field Validator', 'Approve or reject loan proposals'),
    (4, 'Investor', 'List of loan proposals, can invest in proposals'),
    (5, 'Borrower', 'Create loan proposals, list their own proposals')
ON CONFLICT ON CONSTRAINT role_pkey DO NOTHING;

-- User table.
CREATE TYPE "user_status" AS ENUM ('ACTIVE', 'DORMANT', 'BLOCKED', 'DELETED');
CREATE TABLE IF NOT EXISTS "user" (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL,
    phone_number VARCHAR(20),
    role_id BIGINT NOT NULL,
    password BYTEA NOT NULL,
    status user_status NOT NULL DEFAULT 'ACTIVE',
    is_email_verified BOOLEAN NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by BIGINT,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_by BIGINT,
    deleted_at TIMESTAMPTZ,
    deleted_by BIGINT,

    FOREIGN KEY (role_id) REFERENCES "role"(id)
);

CREATE UNIQUE INDEX user_email_idx ON "user" (LOWER(email));

-- User dummy data.
-- The passwords are hashed using bcrypt.
CREATE EXTENSION IF NOT EXISTS pgcrypto;
INSERT INTO "user"(name, email, phone_number, role_id, password, status, is_email_verified, created_at, created_by, updated_at, updated_by)
VALUES
    ('Super Admin', 'super@admin.com', '628123456789', 1, crypt('Super@admin1', gen_salt('bf', 10))::BYTEA, 'ACTIVE', true, NOW(), 1, NOW(), 1),
    ('John the Admin', 'john@admin.com', '628123456789', 2, crypt('John@admin1', gen_salt('bf', 10))::BYTEA, 'ACTIVE', true, NOW(), 1, NOW(), 1),
    ('Field Validator', 'validator@admin.com', '628123456789', 3, crypt('Field@validator1', gen_salt('bf', 10))::BYTEA, 'ACTIVE', true, NOW(), 1, NOW(), 1),
    ('Jane the Investor', 'jane@investor.com', '628123456789', 4, crypt('Jane@investor1', gen_salt('bf', 10))::BYTEA, 'ACTIVE', true, NOW(), 1, NOW(), 1),
    ('Borrower', 'borrower1@user.com', '628123456789', 5, crypt('Borrower@user1', gen_salt('bf', 10))::BYTEA, 'ACTIVE', true, NOW(), 1, NOW(), 1);


-- Loan table.
-- This table records loan proposals made by borrowers.
CREATE TYPE loan_state AS ENUM ('PROPOSED', 'APPROVED', 'FUNDING', 'INVESTED', 'DISBURSED');
CREATE TABLE IF NOT EXISTS loan (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    borrower_id BIGINT NOT NULL REFERENCES "user"(id),
    principal_amount NUMERIC(15,2) NOT NULL,
    interest_rate NUMERIC(5,2) NOT NULL, -- % interest borrower pays.
    roi NUMERIC(5,2) NOT NULL,  -- % return investors get.
    agreement_link TEXT,
    state loan_state NOT NULL DEFAULT 'PROPOSED',
    invested_amount NUMERIC(15,2) NOT NULL DEFAULT 0,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by BIGINT,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_by BIGINT,
    deleted_at TIMESTAMPTZ,
    deleted_by BIGINT
);

-- Loan approval table.
-- This table records the approval of loan proposals by field validators.
-- Each approval is linked to a specific loan and validator.
CREATE TABLE IF NOT EXISTS loan_approval (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    loan_id BIGINT NOT NULL REFERENCES loan(id) UNIQUE,
    validator_id BIGINT NOT NULL REFERENCES "user"(id),
    photo_proof_link TEXT NOT NULL,
    approval_date DATE NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by BIGINT
);

-- Loan investment table.
-- This table records investments made by users into loans.
-- Each investment is linked to a specific loan and an investor.
CREATE TABLE IF NOT EXISTS loan_investment (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    loan_id BIGINT NOT NULL REFERENCES loan(id),
    investor_id BIGINT NOT NULL REFERENCES "user"(id),
    amount NUMERIC(15,2) NOT NULL,
    invested_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by BIGINT
);

CREATE INDEX loan_investment_loan_idx ON loan_investment (loan_id);

-- Loan disbursement table.
-- This table records the disbursement of loans to borrowers.
CREATE TABLE IF NOT EXISTS loan_disbursement (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    loan_id BIGINT NOT NULL REFERENCES loan(id) UNIQUE,
    officer_id BIGINT NOT NULL REFERENCES "user"(id),
    signed_agreement_link TEXT NOT NULL,
    disbursement_date DATE NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by BIGINT
);